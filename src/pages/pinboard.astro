---
import BaseLayout from "../layouts/BaseLayout.astro";

interface BasePost {
  id: string;
  title: string;
  date: string;
  content: string;
  tags: string[];
}

interface PinnedPost extends BasePost {
  isPinned: true;
  type: "learning" | "project";
}

interface RegularPost extends BasePost {
  isPinned?: false;
}

type Post = PinnedPost | RegularPost;

const pinnedPosts: PinnedPost[] = [
  {
    id: "learning",
    isPinned: true,
    title: "Rust and Java",
    date: "3-1-2024",
    content:
      "I've decided to try learning Rust, as it has quickly become an incredibly " +
      "popular language and is being adopted by more and more businesses. " +
      "From my limited time using it so far, it seems like a very versatile " +
      "language, with features that really appeal to me (mainly Cargo). " +
      "I'm also learning Java in school for an object-oriented programming class.",
    tags: ["Learning", "Rust", "Java"],
    type: "learning",
  },
  {
    id: "project",
    isPinned: true,
    title: "MinUI - My minimal terminal-based game and UI library",
    date: "11-1-2024",
    content:
      "MinUI was born from a desire to create terminal-based games in Rust, " +
      "specifically a terminal Tetris clone in my case. While several terminal " +
      "UI libraries  exist for Rust, none quite offered the perfect balance of " +
      "simplicity, performance, and game-focused features that I was looking " +
      "for. MinUI aims to fill this gap by providing a fast, easy-to-use " +
      "library that makes terminal game and UI development a joy.",
    tags: ["Project", "Minui", "Rust"],
    type: "project",
  },
];

const regularPosts: RegularPost[] = [
  // Regular post contents: id, title, date, content, tags
];

const allPosts: Post[] = [...pinnedPosts, ...regularPosts];
---

<BaseLayout
  title="Pinboard | Jack Derksen"
  description="Check out what I'm currently working on"
>
  <h1>Pinboard</h1>

  <div class="posts-container">
    {
      allPosts.map((post) => (
        <article
          class:list={[
            "card",
            "post-card",
            { "pinned-post": post.isPinned },
            {
              [`post-type-${"type" in post ? post.type : ""}`]: "type" in post,
            },
          ]}
          data-tags={post.tags.join(",")}
        >
          {post.isPinned && (
            <div class="pin-indicator">
              <span class="pin-label">
                <span class="pin-emoji">ðŸ“Œ</span>
                {"type" in post && post.type === "learning"
                  ? "Currently Learning"
                  : "Current Project"}
              </span>
            </div>
          )}
          <div class="post-content">
            <div class="post-header">
              <h2>{post.title}</h2>
              <time datetime={post.date} class="post-date">
                {new Date(post.date).toLocaleDateString()}
              </time>
            </div>
            <p>{post.content}</p>
            <div class="post-footer">
              <div class="post-tags">
                {post.tags.map((tag) => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
            </div>
          </div>
        </article>
      ))
    }
  </div>
</BaseLayout>

<style>
  .posts-container {
    display: flex;
    flex-direction: column;
    gap: var(--space-xl);
    margin-top: var(--space-lg);
    max-width: 1000px;
    margin-left: auto;
    margin-right: auto;
  }

  .post-card {
    width: 100%;
    position: relative;
    transition: all var(--theme-transition-duration) ease;
  }

  .pinned-post {
    position: relative;
    border-width: 3px;
  }

  .post-type-learning {
    border-color: var(--accent-primary);
  }

  .post-type-project {
    border-color: var(--accent-primary);
  }

  .pin-indicator {
    position: absolute;
    top: -14px;
    left: var(--space-sm);
    background-color: var(--bg-primary);
    padding: 0 var(--space-sm);
    transition: all var(--theme-transition-duration) ease;
  }

  .pin-label {
    font-size: var(--font-size-sm);
    color: var(--accent-primary);
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: var(--space-xs);
  }

  .post-content {
    display: flex;
    flex-direction: column;
    height: 100%;
    gap: var(--space-xs);
  }

  .post-header {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
    margin-bottom: var(--space-md);
  }

  .post-date {
    font-size: var(--font-size-sm);
    color: var(--contrast-secondary);
  }

  .post-footer {
    margin-top: auto;
    border-top: 2px solid var(--contrast-color);
    padding-top: var(--space-lg);
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
  }

  @media (max-width: 768px) {
    .posts-container {
      padding: 0 var(--space-md);
      padding-bottom: var(--space-xl);
    }

    .pin-indicator {
      top: -3px;
      right: auto;
      left: var(--space-sm);
      padding-left: 0;
    }

    .pin-emoji {
      display: none;
    }

    .pinned-post .post-header {
      margin-top: var(--space-sm);
    }
  }
</style>
